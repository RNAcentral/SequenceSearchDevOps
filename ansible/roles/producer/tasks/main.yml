# file: producer/tasks/main.yml

---
  # This role is related to producer installation
  - name: Enable epel repository
    yum_repository:
      name: epel
      baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
      enabled: yes
      state: present
      description: epel repostiory
      gpgcheck: no
    tags: [ install-deps ]

  - name: Install yum dependencies
    yum:
      name:
      - curl
      - gcc
      - git
      - libaio
      - openssl
      - openssl-devel
      - tar
      - unzip
      - wget
      - zlib-devel
      - gcc-c++
      - make
      - python36
      - python36-devel
      - python36-setuptools
      - nodejs
      - postgresql.x86_64
    tags: [ install-deps ]

  - name: Install pip3
    shell: easy_install-3.6 pip
    tags: [ install-deps ]



  - name: Rsync aiohttp code
    synchronize:
      src: ../../../../sequence_search
      dest: /srv
      rsync_opts:
        - "--exclude=/sequence_search/consumer/databases.iso"
        - "--exclude=/sequence_search/consumer/databases"
        - "--exclude=/sequence_search/consumer/databases_back"
        - "--exclude=/sequence_search/consumer/queries/*.fasta"
        - "--exclude=/sequence_search/consumer/results/*.fasta"
        - "--exclude=/sequence_search/producer/static/node_modules"
        - "--exclude=/sequence_search/producer/static/package-lock.json"
    tags: [ rsync, quick ]

  - name: Umount volume for databases (so that chown doesn't complain)
    mount:
      path: /srv/sequence_search/consumer/databases
      src: /dev/vdb
      fstype: iso9660
      state: unmounted
    ignore_errors: yes
    tags: [ rsync, quick ]

  - name: Chown aiohttp code
    command: "chown -R centos:centos /srv/sequence_search"
    changed_when: false
    tags: [ quick ]

  - name: Chmod aiohttp code
    command: "chmod 755 /srv/sequence_search"
    tags: [ quick ]



  - name: Install pip3 requirements
    shell: /usr/local/bin/pip install -r requirements.txt
    args:
      chdir: /srv/sequence_search
    tags: [ pip-requirements ]



  - name: Delete logs directory
    file:
      path: /var/log/gunicorn
      state: absent
    ignore_errors: yes
    tags: [ logs ]

  - name: Create logs directory
    file:
      path: /var/log/gunicorn
      state: directory
      owner: centos
      group: centos
      mode: 0755
    tags: [ logs ]

  - name: Create access log
    file:
      path: /var/log/gunicorn/access_log
      state: touch
      owner: centos
      group: centos
      mode: 0755
    tags: [ logs ]


  - name: Mount volume for databases
    mount:
      path: /srv/sequence_search/consumer/databases
      src: /dev/vdb
      fstype: iso9660
      state: mounted
    tags: [ volume, volume-mount, quick ]



  - name: Install node_modules
    shell:
      chdir: /srv/sequence_search/producer/static
      cmd: "npm install"
    become: false
    tags: [ frontend ]

  - name: Clean dist directory
    shell:
     chdir: /srv/sequence_search/producer/static
     cmd: "npm run clean"
    tags: [ frontend, quick ]

  - name: Build frontend code bundle in dist
    shell:
      chdir: /srv/sequence_search/producer/static
      cmd: "npm run build"
    tags: [ frontend, quick ]



  - name: Apply migrations to the database
    shell:
      chdir: /srv
      cmd: ENVIRONMENT=PRODUCTION python36 -m sequence_search.db



  - name: Get running processes
    shell: "ps -ef | grep -v grep | grep -w producer | awk '{print $2}'"
    #    shell: "sudo kill $(ps -ef | grep -v grep | grep -w producer | awk '{print $2}')"
    register: running_processes
    tags: [ restart, quick ]

  - name: Kill running processes
    shell: "kill {{ item }}"
    with_items: "{{ running_processes.stdout_lines }}"
    tags: [ restart, quick ]

  # copied over from: https://stackoverflow.com/questions/46515704/how-to-kill-a-running-process-using-ansible
  - wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    register: killed_processes
    tags: [ restart, quick ]

  - name: Force kill stuck processes
    shell: "kill -9 {{ item }}"
    with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
    tags: [ restart, quick ]

  - wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    tags: [ restart, quick ]

  - name: Clean database
    shell:
      chdir: /srv
#      cmd: /usr/local/bin/gunicorn producer.main:app --daemon --bind 0.0.0.0:8002 --worker-class aiohttp.worker.GunicornWebWorker --access-logfile /var/log/gunicorn/access_log --error-logfile /var/log/gunicorn/error_log --env ENVIRONMENT=PRODUCTION --log-level=DEBUG --timeout 120
      cmd: ENVIRONMENT=PRODUCTION nohup python36 -m sequence_search.db &> /var/log/gunicorn/access_log &
    tags: [ never, clean-db ]

  - name: Run producer service
    shell:
      chdir: /srv
#      cmd: /usr/local/bin/gunicorn producer.main:app --daemon --bind 0.0.0.0:8002 --worker-class aiohttp.worker.GunicornWebWorker --access-logfile /var/log/gunicorn/access_log --error-logfile /var/log/gunicorn/error_log --env ENVIRONMENT=PRODUCTION --log-level=DEBUG --timeout 120
      cmd: ENVIRONMENT=PRODUCTION nohup python36 -m sequence_search.producer &> /var/log/gunicorn/access_log &
    tags: [ restart, quick ]

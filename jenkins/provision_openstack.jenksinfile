/**
 * This pipeline is not in use. This was how the infrastructure was manually created before terraform,
 * now it's all done in terraform.
 *
 */

pipeline {
    agent any
    stages {
        stage("Import environment variables") {
            environment {
                OPENSTACKRC = credentials("openstack.rc")
            }
            steps {
                sh 'cat $OPENSTACKRC > ../openstack.rc'
            }

        }
        stage("Create a key pair") {
            environment {
                OS_PASSWORD = credentials("OS_PASSWORD")
            }
            steps {
                sh '''
                    source ../openstack.rc
                    OS_PASSWORD=${OS_PASSWORD}
                    openstack keypair create --public-key id_rsa.pub rnacentral_search_production_keypair
                    chmod 400 rnacentral_search_production_keypair
                '''
            }
        }
        stage("Create a Neutron network") {
            /**
             * Examples of network creation:
             *
             * neutron net-create public_net --shared --router:external --provider:physical_network physnet2 --provider:network_type flat
             *
             * neutron subnet-create public_net 10.7.15.0/24 --name public_subnet --allocation-pool start=10.7.15.150,end=10.7.15.180 --disable-dhcp --gateway 10.7.15.1
             *
             * neutron net-create private_net_vlan --provider:segmentation_id 500 \
             * --provider:physical_network physnet1 --provider:network_type vlan
             *
             * neutron subnet-create private_net_vlan 10.10.20.0/24 --name private_subnet \
             * --allocation-pool start=10.10.20.50,end=10.10.20.100 \
             * --dns-nameserver 8.8.8.8 --gateway 10.10.20.1
             */
            environment {
                OS_PASSWORD = credentials("OS_PASSWORD")
            }
            steps {
                sh '''
                    source ../openstack.rc
                    OS_PASSWORD=${OS_PASSWORD}
                    neutron net-create rnacentral_search_production
                    neutron subnet-create rnacentral_search_production 192.168.0.0/24 --gateway 192.168.0.1 --name rnacentral_search_production_subnet --dns-nameserver 8.8.8.8
                '''
            }
        }
        stage("Create a router") {
            environment {
                OS_PASSWORD = credentials("OS_PASSWORD")
            }
            steps {
                sh '''
                    source ../openstack.rc
                    OS_PASSWORD=${OS_PASSWORD}
                    neutron router-create production_router
                    neutron router-interface-add production_router rnacentral_search_production_subnet
                    neutron router-gateway-set production_router ext-net-36
                '''
            }
        }
        stage("Create API VM, associate any floating IP with it") {
            environment {
                FLOATINGIP = credentials("floating_IP")
                OS_PASSWORD = credentials("OS_PASSWORD")
            }
            steps {
                sh '''
                    source ../openstack.rc
                    OS_PASSWORD=${OS_PASSWORD}
                    nova boot --image CentOS7-1612 --flavor s1.massive --nic net-name=rnacentral_search_production rest_api
                    server_id=$(openstack server list --column 'ID' --name rest_api --format csv | tail -1)
                    server_id=$(eval echo $server_id)
                    server_port_id=$(neutron port-list --device-id $server_id --format csv --column id | tail -1)
                    server_port_id=$(eval echo $server_port_id)
                    ip_id=$(neutron floatingip-list --column id --format csv | tail -1)
                    ip_id=$(eval echo $ip_id)
                    neutron floatingip-associate $ip_id $server_port_id
                '''
            }
        }
        stage("Deploy docker") {
            environment {
                OS_PASSWORD = credentials("OS_PASSWORD")
            }
            steps {
                sh '''
                    source ../openstack.rc
                    OS_PASSWORD=${OS_PASSWORD}
                    floating_ip=$(openstack floating ip list --format csv --column "Floating IP Address" | tail -1)
                    floating_ip=$(eval echo $floating_ip)
                    ansible-playbook -i ../ansible/hosts ../ansible/site.yml
                '''
            }
        }
    }
}

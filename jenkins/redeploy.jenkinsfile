pipeline {
    agent any
    parameters {
        choice (
            choices: ['no' , 'yes'],
            description: 'Shall we re-create the whole OpenStack cloud from scratch?',
            name: 'REBUILD_INFRASTRUCTURE'
        )
        choice (
            choices: ['no', 'yes'],
            description: 'Shall we drop the contents of the Postgres database?',
            name: 'DROP_DATABASE'
        )
        choice (
            choices: ['no', 'yes'],
            description: 'Shall we deploy the code with ansible quick tag?',
            name: 'QUICK'
        )
    }
    stages {
        stage("Install ansible") {
            steps {
                sh '''
                    virtualenv ENV --python=/nfs/public/rw/xfam/rnacentral/test/local/python-3.6.6/bin/python3
                    source ENV/bin/activate
                    easy_install pip==19.1
                    pip install -r sequence_search/requirements.txt
                '''
            }
        }

        stage("Rebuild OpenStack infrastructure") {
            when {
                // Only rebuild terraform
                expression { params.REBUILD_INFRASTRUCTURE == 'yes' }
            }
            environment {
                SEQUENCE_SEARCH_RSA = credentials("sequence_search_rsa")
                SEQUENCE_SEARCH_RSA_PUB = credentials("sequence_search_rsa.pub")
                PROVIDERS_TF = credentials("providers.tf")
            }
            steps {
                script {
                    sh 'cat ${SEQUENCE_SEARCH_RSA} > terraform/sequence_search_rsa'
                    sh 'cat ${SEQUENCE_SEARCH_RSA_PUB} > terraform/sequence_search_rsa.pub'
                    sh 'cat ${PROVIDERS_TF} > terraform/providers.tf'
                }

                dir('terraform') {
                    sh '''
                        ~/src/terraform init -no-color
                        ~/src/terraform destroy -auto-approve -no-color
                        ~/src/terraform apply -auto-approve -no-color
                    '''
                }
            }
        }

        stage("Install SSH keys") {
            steps {
                dir('ansible') {
                    sh '''
                        source ../ENV/bin/activate
                        ansible-playbook -i hosts localhost.yml
                    '''
                }
            }
        }

        stage("Deploy producer") {
            steps {
                dir('ansible') {
                    sh '''
                        source ../ENV/bin/activate
                        ansible-playbook -i hosts producer.yml
                    '''
                }
            }
        }

        stage("Deploy database") {
            steps {
                dir('ansible') {
                    sh '''
                        source ../ENV/bin/activate
                        ansible-playbook -i hosts postgres.yml
                    '''
                }
            }
        }

        stage("Clear database") {
            when {
                // Only rebuild terraform
                expression { params.DROP_DATABASE == 'yes' && params.REBUILD_INFRASTRUCTURE == 'no' }
            }
            steps {
                dir('ansible') {
                    sh '''
                        source ../ENV/bin/activate
                        ansible-playbook -i hosts postgres.yml --tags postgresql-configure
                    '''
                }
            }
        }

        stage("Deploy consumers") {
            steps {
                dir('ansible') {
                    sh '''
                        source ../ENV/bin/activate
                        ansible-playbook -i hosts consumers.yml
                    '''
                }
            }
        }

    }
}